{
  "telegram": {
    "bot_token": "YOUR_BOT_TOKEN_FROM_ENV_OR_HERE",
    "channel_id": "YOUR_CHANNEL_ID_FROM_ENV_OR_HERE",
    "channel_handle_id": "YOUR_CHANNEL_HANDLE_ID_FROM_ENV_OR_HERE"
  },
  "source_repo": {
    "url": "https://github.com/nonuseraccount/telegram-tunnel-enricher.git",
    "branch": "main",
    "folder_to_zip": "output"
  },
  "output": {
    "archive_name": "Telegram-Tunnel",
    "telegram_caption": "This ZIP features an automated, multi-stage enriched configuration collection ensuring quality and reliability.\n\nðŸ—„ Archive structure in output:\n`channel_sources/` â€” from Telegram channels  \n`subscription_sources/` â€” from subscription links  \n`collected_sources/` â€” combined working configs  \n\nðŸ—ƒ Each contains subfolders:\n`countries/` â€” by country (e.g., us, de)  \n`protocols/` â€” by protocol (e.g., vless, vmess, shadowsocks, trojan, hysteria)  \n`networks/` â€” by network (ws, grpc, tcp, http, udp)  \n`security/` â€” by security layer (tls, ntls, rlty)  \n`ip_versions/` â€” by IP version (ipv4, ipv6)  \n\nðŸ“¦ Use files in each category folder:  \n`raw` (plain text configs)  \n`base64` (Base64 encoded for client import)  \n\nSubscription files include headers & developer signatures as metadata. Import `_base64` files into clients like V2Ray, NekoBox.",
    "chunk_size_mb": 20
  },
  "runtime": {
    "max_execution_seconds": 1800,
    "request_timeout": 30
  }
}
